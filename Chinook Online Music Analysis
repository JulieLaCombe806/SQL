-- In this project, I utilized the Chinook database, which is publicly available online, to perform a comprehensive analysis using SQL in SQLite. Initially, I conducted an overview of the data contained within each table. Following this, I focused on examining customer demographics.Subsequently, I carried out a market analysis to identify the most popular music genres, top-selling albums, and the albums generating the highest revenue. Additionally, I analyzed invoice and revenue data, employing techniques such as Common Table Expressions (CTEs), JOINs, and CASE statements to derive meaningful insights.--


-- I am working with a dataset called Chinook, which represents a digital media store and includes tables for artists, albums, media types, tracks, invoices, employees, and customers.


-- Review all of the tables

SELECT* FROM chinook.albums LIMIT 10;
SELECT* FROM chinook.artists LIMIT 10;
SELECT* FROM chinook.customers LIMIT 10;
SELECT* FROM chinook.employees LIMIT 10;
SELECT* FROM chinook.genres LIMIT 10;
SELECT* FROM chinook.invoice_items LIMIT 10;
SELECT* FROM chinook.invoices LIMIT 10;
SELECT* FROM chinook.media_types LIMIT 10;
SELECT* FROM chinook.playlisT_track LIMIT 10;
SELECT* FROM chinook.playlists LIMIT 10;
SELECT* FROM chinook.tracks LIMIT 10;


-- CUSTOMER DEMOGRAPHICS --

-- 1. Identify which country each customer is from. –

SELECT CustomerId, Country,
FirstName || ' ' || LastName AS FullName
FROM chinook.customers
;


-- 2. Show Customers (full names, customer ID, and country) who are not in the United States.--

SELECT CustomerId, Country,
FirstName || ' ' || LastName AS FullName
FROM chinook.customers
WHERE Country != 'USA'
ORDER BY Country
;


-- 3. Show only the customers from Canada or France. –

SELECT CustomerId, Country,
FirstName || ' ' || LastName AS FullName
FROM chinook.customers
WHERE Country = 'Canada' OR Country = 'France'
;



-- MARKET ANALYSIS --


--4. Show all Tracks, and include the Album name, Media type, and Genre.

WITH CTE_tracks AS
(
SELECT tracks.Name, me.Name AS MediaType, genres.Name AS genres, tracks.AlbumId
FROM tracks
LEFT JOIN media_types AS me
ON me.MediaTypeId = tracks.MediaTypeId
LEFT JOIN genres
ON genres.GenreId = TRACKS.GenreId
)
SELECT cte.Name AS 'Track Title', cte.MediaType, cte.genres AS 'Genres', albums.Title AS 'Album Title'
FROM CTE_tracks cte
LEFT JOIN albums
ON cte.AlbumId = albums.AlbumId
;


--5. What was the most popular album in 2009? --

SELECT albums.Title AS AlbumTitle, COUNT(invoice_items.InvoiceLineId) AS PurchaseCount
FROM albums
JOIN tracks ON albums.AlbumId = tracks.AlbumId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
WHERE strftime('%Y', invoices.InvoiceDate) = '2009'
GROUP BY albums.AlbumId
ORDER BY PurchaseCount DESC
LIMIT 1;


-- 6. What are the top 10 generas purchased by cusromers? --

SELECT genres.Name AS Genre, COUNT (tracks.TrackId) AS Track
FROM chinook.genres
JOIN tracks
ON genres.GenreId = tracks.GenreId
GROUP BY genres.name
ORDER BY Track DESC
LIMIT 10;


-- 7. What is the most popular genera purchased in the USA? --

SELECT genres.Name, COUNT(tracks.TrackId) AS GenreCount
FROM genres
JOIN tracks ON genres.GenreId = tracks.GenreId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
JOIN customers ON invoices.CustomerId = customers.CustomerId
WHERE customers.Country = 'USA'
GROUP BY genres.Name
ORDER BY GenreCount DESC
LIMIT 10;



-- 8. What is the most popular genra purchased outside of the USA? --

SELECT genres.Name, COUNT(tracks.TrackId) AS GenreCount
FROM genres
JOIN tracks ON genres.GenreId = tracks.GenreId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId
JOIN customers ON invoices.CustomerId = customers.CustomerId
WHERE customers.Country != 'USA'
GROUP BY genres.Name
ORDER BY GenreCount DESC
LIMIT 10;



-- BUSINESS ANALYSIS --

-- 9. Which Albums had the highest revenue?

SELECT albums.Title, invoices.Total
FROM albums
     LEFT JOIN tracks
     ON albums.AlbumId = tracks.AlbumId
     LEFT JOIN invoice_items
     ON tracks.TrackId = invoice_items.TrackId
     LEFT JOIN invoices
     ON invoice_items.InvoiceId = invoices.InvoiceId
WHERE invoices.Total > 25
ORDER BY albums.Title
;


-- 10. How many customers made purchase in the last quarter of 2012? --

SELECT CustomerId, InvoiceDate
FROM invoices
WHERE InvoiceDate like '2012-12%'
OR InvoiceDate like '2012-11%'
OR InvoiceDate like '2012-10%'
;
--
WITH customer_q4 AS
(
SELECT invoices.CustomerId
FROM invoices
WHERE invoices.InvoiceDate like '2012-12%'
OR invoices.InvoiceDate like '2012-11%'
OR invoices.InvoiceDate like '2012-10%'
)
SELECT COUNT(*)
FROM customer_q4;


-- 11. How many customers made purchase in the last quarter of 2013? --

SELECT CustomerId, InvoiceDate
FROM invoices
WHERE InvoiceDate like '2013-12%'
OR InvoiceDate like '2013-11%'
OR InvoiceDate like '2013-10%'
;
--
WITH customer_q4 AS
(
SELECT invoices.CustomerId
FROM invoices
WHERE invoices.InvoiceDate like '2013-12%'
OR invoices.InvoiceDate like '2013-11%'
OR invoices.InvoiceDate like '2013-10%'
)
SELECT COUNT(*)
FROM customer_q4;


-- 12. How many customers made purchases in the first quarter of 2013? 

SELECT CustomerId, strftime('%m/%d/%Y', InvoiceDate) AS FormattedInvoiceDate
FROM invoices
WHERE InvoiceDate like '2013-12%'
OR InvoiceDate like '2013-11%'
OR InvoiceDate like '2013-10%';


-- 13. How many customers had invoices in the last quarter of 2013? --

WITH customer_q4 AS
(
SELECT invoices.CustomerId
FROM invoices
WHERE invoices.InvoiceDate like '2013-12%'
OR invoices.InvoiceDate like '2013-11%'
OR invoices.InvoiceDate like '2013-10%'
)
SELECT COUNT(*)
FROM customer_q4;


-- 14. Top 5 genres contribute the highest revenue for the company: dataset genres, tracks, invoice_items

SELECT genres.Name, COUNT(invoices.InvoiceId) AS num_purchase, SUM(invoices.Total) AS total_revenue
FROM genres

LEFT JOIN tracks
ON tracks.GenreId = genres.GenreId

LEFT JOIN invoice_items
ON INVOICE_ITEMS.TrackId = tracks.TrackId

LEFT JOIN invoices
ON invoices.InvoiceId = invoice_items.InvoiceId

GROUP BY genres.Name
ORDER BY total_revenue DESC
LIMIT 5
;


-- 15. Which genres were listened the most in the last quarter of 2013? --

SELECT genres.Name, COUNT(invoices.InvoiceId) AS num_purchase
FROM chinook.genres
LEFT JOIN tracks
ON tracks.GenreId = genres.GenreId
LEFT JOIN invoice_items
ON INVOICE_ITEMS.TrackId = tracks.TrackId
LEFT JOIN invoices
ON invoices.InvoiceId = invoice_items.InvoiceId
WHERE invoices.InvoiceDate like '2013-12%'
OR invoices.InvoiceDate like '2013-11%'
OR invoices.InvoiceDate like '2013-10%'
GROUP BY genres.Name
ORDER BY num_purchase DESC
;


-- 16. How many Invoices were there in 2013? –

SELECT COUNT (InvoiceId)
FROM chinook.invoices
WHERE InvoiceDate like '2013%'
;


-- 17. How many Invoices were there in 2012? --
SELECT COUNT (InvoiceId)
FROM invoices
WHERE InvoiceDate like '2013%'
; 


-- 18. What was the difference in the number of invoices between 2012 & 2013? Using CTE--

SELECT
    (SELECT COUNT(InvoiceId)
     FROM invoices
     WHERE strftime('%Y', InvoiceDate) = '2012') AS Invoices_2012,
    
    (SELECT COUNT(InvoiceId)
     FROM invoices
     WHERE strftime('%Y', InvoiceDate) = '2013') AS Invoices_2013,

    ((SELECT COUNT(InvoiceId)
      FROM invoices
      WHERE strftime('%Y', InvoiceDate) = '2013') -
     (SELECT COUNT(InvoiceId)
      FROM invoices
      WHERE strftime('%Y', InvoiceDate) = '2012')) AS Difference;


-- 19. What is the difference between how many invoices were created in 2012 & 2013? Using CASE statements--

SELECT 
    SUM(CASE WHEN strftime('%Y', InvoiceDate) = '2013' THEN 1 ELSE 0 END) AS num_invoices_2013,
    SUM(CASE WHEN strftime('%Y', InvoiceDate) = '2012' THEN 1 ELSE 0 END) AS num_invoices_2012,
    (SUM(CASE WHEN strftime('%Y', InvoiceDate) = '2013' THEN 1 ELSE 0 END) - 
     SUM(CASE WHEN strftime('%Y', InvoiceDate) = '2012' THEN 1 ELSE 0 END)) AS difference
FROM invoices
WHERE strftime('%Y', InvoiceDate) IN ('2012', '2013');


-- 20. Which year had the greatest revenue? --

SELECT 
    strftime('%Y', InvoiceDate) AS InvoiceYear,
    SUM(Total) AS total_sales
FROM invoices
WHERE strftime('%Y', InvoiceDate) BETWEEN '2009' AND '2013'
GROUP BY strftime('%Y', InvoiceDate)
ORDER BY total_sales DESC;


-- 21. Write a query that includes the purchased track name AND artist name with each invoice line ID. --

SELECT 
    invoice_items.InvoiceLineId,
    tracks.Name AS TrackName,
    artists.Name AS ArtistName,
    invoices.InvoiceId,
    invoices.InvoiceDate
FROM invoice_items
JOIN tracks ON invoice_items.TrackId = tracks.TrackId
JOIN albums ON tracks.AlbumId = albums.AlbumId
JOIN artists ON albums.ArtistId = artists.ArtistId
JOIN invoices ON invoice_items.InvoiceId = invoices.InvoiceId;


-- SALES AGENT PERFORMANCE --

-- 22. Show all employees who are Sales Agents --

SELECT FirstName || ' ' || LastName AS FullName
FROM employees
WHERE Title = 'Sales Support Agent'
;


-- 23.  Show allinvoices associated with each sales agent. --

SELECT invoices.invoiceId, employees.FirstName || ' ' || employees.LastName AS FullName
FROM invoices

LEFT JOIN customers
ON invoices.CustomerId = customers.CustomerId

LEFT JOIN employees
ON customers.SupportRepId = employees.EmployeeId

ORDER BY FullName
;


-- 24. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers. --  

SELECT 
    customers.FirstName || ' ' || customers.LastName AS "Customer Name",
    customers.Country,
    employees.FirstName || ' ' || employees.LastName AS "Customer Support",
    SUM(invoices.Total) AS "Total Spent"
FROM invoices
LEFT JOIN customers ON invoices.CustomerId = customers.CustomerId
LEFT JOIN employees ON customers.SupportRepId = employees.EmployeeId
GROUP BY customers.FirstName, customers.LastName, customers.Country, employees.FirstName, employees.LastName
ORDER BY "Customer Support";


-- 25. Show the total amount of sales made by each sales agent. --

SELECT 
    SUM(invoices.Total) AS 'Total Revenue By Agent', 
    employees.FirstName || ' ' || employees.LastName AS 'Employee Name'
FROM 
    invoices
JOIN 
    customers ON invoices.CustomerId = customers.CustomerId
JOIN 
    employees ON customers.SupportRepId = employees.EmployeeId
GROUP BY 
    employees.FirstName, employees.LastName;


-- 26. Which sales agent brought in the largest revenue in 2013? -- 

SELECT SUM(invoices.Total) AS '2013 Revenue', employees.FirstName || ' ' || employees.LastName AS 'Employee Name'
FROM invoices

JOIN customers
ON invoices.CustomerId = customers.CustomerId

JOIN employees
ON customers.SupportRepId = employees.EmployeeId

WHERE invoices.InvoiceDate like '2013%'
GROUP BY 'Employee Name'
ORDER BY '2013 Revenue'
LIMIT 1
;

--27. What was the total revenue in 2013? --

SELECT SUM(Total) AS TotalRevenue
FROM invoices
WHERE strftime('%Y', InvoiceDate) = '2013';
